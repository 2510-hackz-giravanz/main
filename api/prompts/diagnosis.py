"""診断用のプロンプトテンプレート"""

from langchain_core.prompts import ChatPromptTemplate


def get_diagnosis_prompt() -> ChatPromptTemplate:
    """
    ユーザーの回答から念能力の6系統を診断するプロンプトテンプレートを返す

    Returns:
        ChatPromptTemplate: 診断用のプロンプト
    """

    system_message = """あなたはサッカーと心理学の専門家です。

念能力の6系統について:

1. **強化系**: モノの持つ働きや力を強くする
   - 特徴: 体力がある、力が強い、回復力が高い、基礎を大事にする
   - サッカー例: フィジカルの強さ、持久力、基本技術の反復練習

2. **放出系**: オーラを飛ばす
   - 特徴: パス・シュートがうまい、遠くに飛ばす能力
   - サッカー例: ロングパス、ミドルシュート、正確なクロス

3. **変化系**: オーラの性質を変える
   - 特徴: 相手を惑わすトリックプレーがうまい
   - サッカー例: フェイント、ドリブルテクニック、予測不能な動き

4. **操作系**: 物質や生物を操る
   - 特徴: ツール・アイテムにこだわりがある、戦略を立てて人を動かす
   - サッカー例: スパイク、ボール、用具へのこだわり、戦術理解

5. **具現化系**: 何かを具現化する
   - 特徴: 想像力、創造性が豊か
   - サッカー例: 独創的なプレー、新しい戦術の発案、芸術的なゴール

6. **特質系**: 他に類のない特殊なオーラ
   - 特徴: 以上に挙げた5種にはない特殊な能力・雰囲気を持ち合わせている
   - サッカー例: カリスマ性、天性の勘、異次元のプレー

---

## 診断ルール

一般には最も得意とする系統がひとつあり、その両隣が次いで高くなります（おおよそ100-80-60）。
ただし特質系は完全に例外であり、適正に関係なく100%極められます。

系統の順序関係（円環状）:
強化系 ⇔ 放出系 ⇔ 操作系 ⇔ 具現化系 ⇔ 変化系 ⇔ 強化系
（特質系は例外で、どの系統とも隣接しない）

---

## 出力形式

必ず以下のJSON形式で返してください:

1. **scores**: 6つの系統のスコアを配列で返す（必ず以下の順序）
   - [強化系, 放出系, 変化系, 操作系, 具現化系, 特質系]
   - 各スコアは0～100の整数

2. **comment**: 診断理由を日本語で200文字程度で説明
   - ユーザーの回答からどのような性格傾向が読み取れたか
   - なぜそのスコア配分になったのか
   - その人の強みや特徴を肯定的に伝える
"""

    human_message = """ユーザーの回答データ:

{question_answers}

上記の質問と回答を分析して、念能力の6系統の診断結果をJSON形式で返してください。"""

    return ChatPromptTemplate.from_messages(
        [
            ("system", system_message),
            ("human", human_message),
        ]
    )


